{"ast":null,"code":"import { useContext, useRef, useInsertionEffect, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { LazyContext } from '../../context/LazyContext.mjs';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\nimport { optimizedAppearDataAttribute } from '../../animation/optimized-appear/data-id.mjs';\nimport { microtask } from '../../frameloop/microtask.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { SwitchLayoutGroupContext } from '../../context/SwitchLayoutGroupContext.mjs';\nfunction useVisualElement(Component, visualState, props, createVisualElement, ProjectionNodeConstructor) {\n  var _a, _b;\n  const {\n    visualElement: parent\n  } = useContext(MotionContext);\n  const lazyContext = useContext(LazyContext);\n  const presenceContext = useContext(PresenceContext);\n  const reducedMotionConfig = useContext(MotionConfigContext).reducedMotion;\n  const visualElementRef = useRef();\n  /**\r\n   * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\r\n   */\n  createVisualElement = createVisualElement || lazyContext.renderer;\n  if (!visualElementRef.current && createVisualElement) {\n    visualElementRef.current = createVisualElement(Component, {\n      visualState,\n      parent,\n      props,\n      presenceContext,\n      blockInitialAnimation: presenceContext ? presenceContext.initial === false : false,\n      reducedMotionConfig\n    });\n  }\n  const visualElement = visualElementRef.current;\n  /**\r\n   * Load Motion gesture and animation features. These are rendered as renderless\r\n   * components so each feature can optionally make use of React lifecycle methods.\r\n   */\n  const initialLayoutGroupConfig = useContext(SwitchLayoutGroupContext);\n  if (visualElement && !visualElement.projection && ProjectionNodeConstructor && (visualElement.type === \"html\" || visualElement.type === \"svg\")) {\n    createProjectionNode(visualElementRef.current, props, ProjectionNodeConstructor, initialLayoutGroupConfig);\n  }\n  useInsertionEffect(() => {\n    visualElement && visualElement.update(props, presenceContext);\n  });\n  /**\r\n   * Cache this value as we want to know whether HandoffAppearAnimations\r\n   * was present on initial render - it will be deleted after this.\r\n   */\n  const optimisedAppearId = props[optimizedAppearDataAttribute];\n  const wantsHandoff = useRef(Boolean(optimisedAppearId) && !((_a = window.MotionHandoffIsComplete) === null || _a === void 0 ? void 0 : _a.call(window, optimisedAppearId)) && ((_b = window.MotionHasOptimisedAnimation) === null || _b === void 0 ? void 0 : _b.call(window, optimisedAppearId)));\n  useIsomorphicLayoutEffect(() => {\n    if (!visualElement) return;\n    window.MotionIsMounted = true;\n    visualElement.updateFeatures();\n    microtask.render(visualElement.render);\n    /**\r\n     * Ideally this function would always run in a useEffect.\r\n     *\r\n     * However, if we have optimised appear animations to handoff from,\r\n     * it needs to happen synchronously to ensure there's no flash of\r\n     * incorrect styles in the event of a hydration error.\r\n     *\r\n     * So if we detect a situtation where optimised appear animations\r\n     * are running, we use useLayoutEffect to trigger animations.\r\n     */\n    if (wantsHandoff.current && visualElement.animationState) {\n      visualElement.animationState.animateChanges();\n    }\n  });\n  useEffect(() => {\n    if (!visualElement) return;\n    if (!wantsHandoff.current && visualElement.animationState) {\n      visualElement.animationState.animateChanges();\n    }\n    if (wantsHandoff.current) {\n      // This ensures all future calls to animateChanges() in this component will run in useEffect\n      queueMicrotask(() => {\n        var _a;\n        (_a = window.MotionHandoffMarkAsComplete) === null || _a === void 0 ? void 0 : _a.call(window, optimisedAppearId);\n      });\n      wantsHandoff.current = false;\n    }\n  });\n  return visualElement;\n}\nfunction createProjectionNode(visualElement, props, ProjectionNodeConstructor, initialPromotionConfig) {\n  const {\n    layoutId,\n    layout,\n    drag,\n    dragConstraints,\n    layoutScroll,\n    layoutRoot\n  } = props;\n  visualElement.projection = new ProjectionNodeConstructor(visualElement.latestValues, props[\"data-framer-portal-id\"] ? undefined : getClosestProjectingNode(visualElement.parent));\n  visualElement.projection.setOptions({\n    layoutId,\n    layout,\n    alwaysMeasureLayout: Boolean(drag) || dragConstraints && isRefObject(dragConstraints),\n    visualElement,\n    /**\r\n     * TODO: Update options in an effect. This could be tricky as it'll be too late\r\n     * to update by the time layout animations run.\r\n     * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\r\n     * ensuring it gets called if there's no potential layout animations.\r\n     *\r\n     */\n    animationType: typeof layout === \"string\" ? layout : \"both\",\n    initialPromotionConfig,\n    layoutScroll,\n    layoutRoot\n  });\n}\nfunction getClosestProjectingNode(visualElement) {\n  if (!visualElement) return undefined;\n  return visualElement.options.allowProjection !== false ? visualElement.projection : getClosestProjectingNode(visualElement.parent);\n}\nexport { useVisualElement };","map":{"version":3,"names":["useContext","useRef","useInsertionEffect","useEffect","PresenceContext","MotionContext","useIsomorphicLayoutEffect","LazyContext","MotionConfigContext","optimizedAppearDataAttribute","microtask","isRefObject","SwitchLayoutGroupContext","useVisualElement","Component","visualState","props","createVisualElement","ProjectionNodeConstructor","_a","_b","visualElement","parent","lazyContext","presenceContext","reducedMotionConfig","reducedMotion","visualElementRef","renderer","current","blockInitialAnimation","initial","initialLayoutGroupConfig","projection","type","createProjectionNode","update","optimisedAppearId","wantsHandoff","Boolean","window","MotionHandoffIsComplete","call","MotionHasOptimisedAnimation","MotionIsMounted","updateFeatures","render","animationState","animateChanges","queueMicrotask","MotionHandoffMarkAsComplete","initialPromotionConfig","layoutId","layout","drag","dragConstraints","layoutScroll","layoutRoot","latestValues","undefined","getClosestProjectingNode","setOptions","alwaysMeasureLayout","animationType","options","allowProjection"],"sources":["C:/Users/kruti/Downloads/FIPr/Exhibition/client/node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs"],"sourcesContent":["import { useContext, useRef, useInsertionEffect, useEffect } from 'react';\r\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\r\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\r\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\r\nimport { LazyContext } from '../../context/LazyContext.mjs';\r\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\r\nimport { optimizedAppearDataAttribute } from '../../animation/optimized-appear/data-id.mjs';\r\nimport { microtask } from '../../frameloop/microtask.mjs';\r\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\r\nimport { SwitchLayoutGroupContext } from '../../context/SwitchLayoutGroupContext.mjs';\r\n\r\nfunction useVisualElement(Component, visualState, props, createVisualElement, ProjectionNodeConstructor) {\r\n    var _a, _b;\r\n    const { visualElement: parent } = useContext(MotionContext);\r\n    const lazyContext = useContext(LazyContext);\r\n    const presenceContext = useContext(PresenceContext);\r\n    const reducedMotionConfig = useContext(MotionConfigContext).reducedMotion;\r\n    const visualElementRef = useRef();\r\n    /**\r\n     * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\r\n     */\r\n    createVisualElement = createVisualElement || lazyContext.renderer;\r\n    if (!visualElementRef.current && createVisualElement) {\r\n        visualElementRef.current = createVisualElement(Component, {\r\n            visualState,\r\n            parent,\r\n            props,\r\n            presenceContext,\r\n            blockInitialAnimation: presenceContext\r\n                ? presenceContext.initial === false\r\n                : false,\r\n            reducedMotionConfig,\r\n        });\r\n    }\r\n    const visualElement = visualElementRef.current;\r\n    /**\r\n     * Load Motion gesture and animation features. These are rendered as renderless\r\n     * components so each feature can optionally make use of React lifecycle methods.\r\n     */\r\n    const initialLayoutGroupConfig = useContext(SwitchLayoutGroupContext);\r\n    if (visualElement &&\r\n        !visualElement.projection &&\r\n        ProjectionNodeConstructor &&\r\n        (visualElement.type === \"html\" || visualElement.type === \"svg\")) {\r\n        createProjectionNode(visualElementRef.current, props, ProjectionNodeConstructor, initialLayoutGroupConfig);\r\n    }\r\n    useInsertionEffect(() => {\r\n        visualElement && visualElement.update(props, presenceContext);\r\n    });\r\n    /**\r\n     * Cache this value as we want to know whether HandoffAppearAnimations\r\n     * was present on initial render - it will be deleted after this.\r\n     */\r\n    const optimisedAppearId = props[optimizedAppearDataAttribute];\r\n    const wantsHandoff = useRef(Boolean(optimisedAppearId) &&\r\n        !((_a = window.MotionHandoffIsComplete) === null || _a === void 0 ? void 0 : _a.call(window, optimisedAppearId)) &&\r\n        ((_b = window.MotionHasOptimisedAnimation) === null || _b === void 0 ? void 0 : _b.call(window, optimisedAppearId)));\r\n    useIsomorphicLayoutEffect(() => {\r\n        if (!visualElement)\r\n            return;\r\n        window.MotionIsMounted = true;\r\n        visualElement.updateFeatures();\r\n        microtask.render(visualElement.render);\r\n        /**\r\n         * Ideally this function would always run in a useEffect.\r\n         *\r\n         * However, if we have optimised appear animations to handoff from,\r\n         * it needs to happen synchronously to ensure there's no flash of\r\n         * incorrect styles in the event of a hydration error.\r\n         *\r\n         * So if we detect a situtation where optimised appear animations\r\n         * are running, we use useLayoutEffect to trigger animations.\r\n         */\r\n        if (wantsHandoff.current && visualElement.animationState) {\r\n            visualElement.animationState.animateChanges();\r\n        }\r\n    });\r\n    useEffect(() => {\r\n        if (!visualElement)\r\n            return;\r\n        if (!wantsHandoff.current && visualElement.animationState) {\r\n            visualElement.animationState.animateChanges();\r\n        }\r\n        if (wantsHandoff.current) {\r\n            // This ensures all future calls to animateChanges() in this component will run in useEffect\r\n            queueMicrotask(() => {\r\n                var _a;\r\n                (_a = window.MotionHandoffMarkAsComplete) === null || _a === void 0 ? void 0 : _a.call(window, optimisedAppearId);\r\n            });\r\n            wantsHandoff.current = false;\r\n        }\r\n    });\r\n    return visualElement;\r\n}\r\nfunction createProjectionNode(visualElement, props, ProjectionNodeConstructor, initialPromotionConfig) {\r\n    const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot, } = props;\r\n    visualElement.projection = new ProjectionNodeConstructor(visualElement.latestValues, props[\"data-framer-portal-id\"]\r\n        ? undefined\r\n        : getClosestProjectingNode(visualElement.parent));\r\n    visualElement.projection.setOptions({\r\n        layoutId,\r\n        layout,\r\n        alwaysMeasureLayout: Boolean(drag) || (dragConstraints && isRefObject(dragConstraints)),\r\n        visualElement,\r\n        /**\r\n         * TODO: Update options in an effect. This could be tricky as it'll be too late\r\n         * to update by the time layout animations run.\r\n         * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\r\n         * ensuring it gets called if there's no potential layout animations.\r\n         *\r\n         */\r\n        animationType: typeof layout === \"string\" ? layout : \"both\",\r\n        initialPromotionConfig,\r\n        layoutScroll,\r\n        layoutRoot,\r\n    });\r\n}\r\nfunction getClosestProjectingNode(visualElement) {\r\n    if (!visualElement)\r\n        return undefined;\r\n    return visualElement.options.allowProjection !== false\r\n        ? visualElement.projection\r\n        : getClosestProjectingNode(visualElement.parent);\r\n}\r\n\r\nexport { useVisualElement };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}