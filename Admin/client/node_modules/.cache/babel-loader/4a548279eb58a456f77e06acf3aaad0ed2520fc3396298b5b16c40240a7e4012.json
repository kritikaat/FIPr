{"ast":null,"code":"var _jsxFileName = \"D:\\\\IPR Version 1\\\\Admin\\\\client\\\\src\\\\components\\\\AdminCalendar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Calendar from './Calendar';\nimport { CalendarIcon } from 'lucide-react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminCalendar = () => {\n  _s();\n  const [selectedDates, setSelectedDates] = useState([]);\n  const [isSaving, setIsSaving] = useState(false);\n  const [message, setMessage] = useState('');\n\n  // Helper function to normalize date to local midnight\n  const normalizeDate = date => {\n    const normalized = new Date(date);\n    normalized.setHours(0, 0, 0, 0);\n    // Adjust for local timezone offset\n    const timezoneOffset = normalized.getTimezoneOffset() * 60000;\n    return new Date(normalized.getTime() + timezoneOffset);\n  };\n  useEffect(() => {\n    fetchBusyDates();\n  }, []);\n  const fetchBusyDates = async () => {\n    try {\n      const response = await axios.get('/api/admin/busy-dates');\n      // Normalize each date when setting it in state\n      const normalizedDates = response.data.dates.map(date => normalizeDate(date.date));\n      setSelectedDates(normalizedDates);\n    } catch (error) {\n      setMessage('Error fetching dates');\n      console.error('Error:', error);\n    }\n  };\n  const handleSelectDates = dates => {\n    // Normalize each date when updating selections\n    const normalizedDates = dates.map(date => normalizeDate(date));\n    setSelectedDates(normalizedDates);\n  };\n  const handleSaveDates = async () => {\n    setIsSaving(true);\n    setMessage('');\n    try {\n      // When saving, convert to YYYY-MM-DD format while preserving the correct date\n      await axios.post('/api/admin/busy-dates', {\n        dates: selectedDates.map(date => {\n          const normalized = normalizeDate(date);\n          return normalized.toISOString().split('T')[0];\n        })\n      });\n      setMessage('Dates saved successfully!');\n    } catch (error) {\n      setMessage('Error saving dates');\n      console.error('Error:', error);\n    } finally {\n      setIsSaving(false);\n    }\n  };\n  const formatDisplayDate = date => {\n    // Ensure we're formatting the normalized date\n    const normalized = normalizeDate(date);\n    return normalized.toLocaleDateString('en-US', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white shadow-lg rounded-lg p-6 mb-6\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Calendar, {\n        onSelectDates: handleSelectDates,\n        selectedDates: selectedDates\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), selectedDates.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-6 p-4 bg-blue-50 rounded-md border border-blue-200\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-lg font-semibold text-blue-800 mb-2\",\n          children: \"Selected Dates:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"space-y-1\",\n          children: selectedDates.map(date => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"flex items-center text-blue-700\",\n            children: [/*#__PURE__*/_jsxDEV(CalendarIcon, {\n              className: \"mr-2\",\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 19\n            }, this), formatDisplayDate(date)]\n          }, date.toString(), true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSaveDates,\n          disabled: isSaving,\n          className: \"mt-4 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-blue-300\",\n          children: isSaving ? 'Saving...' : 'Save Dates'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: `mt-2 ${message.includes('Error') ? 'text-red-600' : 'text-green-600'}`,\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(AdminCalendar, \"3vqGlZZrFZsZgLuh2jo12ASK2oo=\");\n_c = AdminCalendar;\nexport default AdminCalendar;\nvar _c;\n$RefreshReg$(_c, \"AdminCalendar\");","map":{"version":3,"names":["React","useState","useEffect","Calendar","CalendarIcon","axios","jsxDEV","_jsxDEV","AdminCalendar","_s","selectedDates","setSelectedDates","isSaving","setIsSaving","message","setMessage","normalizeDate","date","normalized","Date","setHours","timezoneOffset","getTimezoneOffset","getTime","fetchBusyDates","response","get","normalizedDates","data","dates","map","error","console","handleSelectDates","handleSaveDates","post","toISOString","split","formatDisplayDate","toLocaleDateString","weekday","year","month","day","className","children","onSelectDates","fileName","_jsxFileName","lineNumber","columnNumber","length","size","toString","onClick","disabled","includes","_c","$RefreshReg$"],"sources":["D:/IPR Version 1/Admin/client/src/components/AdminCalendar.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Calendar from './Calendar';\r\nimport { CalendarIcon } from 'lucide-react';\r\nimport axios from 'axios';\r\n\r\nconst AdminCalendar = () => {\r\n  const [selectedDates, setSelectedDates] = useState([]);\r\n  const [isSaving, setIsSaving] = useState(false);\r\n  const [message, setMessage] = useState('');\r\n\r\n  // Helper function to normalize date to local midnight\r\n  const normalizeDate = (date) => {\r\n    const normalized = new Date(date);\r\n    normalized.setHours(0, 0, 0, 0);\r\n    // Adjust for local timezone offset\r\n    const timezoneOffset = normalized.getTimezoneOffset() * 60000;\r\n    return new Date(normalized.getTime() + timezoneOffset);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchBusyDates();\r\n  }, []);\r\n\r\n  const fetchBusyDates = async () => {\r\n    try {\r\n      const response = await axios.get('/api/admin/busy-dates');\r\n      // Normalize each date when setting it in state\r\n      const normalizedDates = response.data.dates.map(date => \r\n        normalizeDate(date.date)\r\n      );\r\n      setSelectedDates(normalizedDates);\r\n    } catch (error) {\r\n      setMessage('Error fetching dates');\r\n      console.error('Error:', error);\r\n    }\r\n  };\r\n\r\n  const handleSelectDates = (dates) => {\r\n    // Normalize each date when updating selections\r\n    const normalizedDates = dates.map(date => normalizeDate(date));\r\n    setSelectedDates(normalizedDates);\r\n  };\r\n\r\n  const handleSaveDates = async () => {\r\n    setIsSaving(true);\r\n    setMessage('');\r\n\r\n    try {\r\n      // When saving, convert to YYYY-MM-DD format while preserving the correct date\r\n      await axios.post('/api/admin/busy-dates', {\r\n        dates: selectedDates.map(date => {\r\n          const normalized = normalizeDate(date);\r\n          return normalized.toISOString().split('T')[0];\r\n        })\r\n      });\r\n      setMessage('Dates saved successfully!');\r\n    } catch (error) {\r\n      setMessage('Error saving dates');\r\n      console.error('Error:', error);\r\n    } finally {\r\n      setIsSaving(false);\r\n    }\r\n  };\r\n\r\n  const formatDisplayDate = (date) => {\r\n    // Ensure we're formatting the normalized date\r\n    const normalized = normalizeDate(date);\r\n    return normalized.toLocaleDateString('en-US', {\r\n      weekday: 'long',\r\n      year: 'numeric',\r\n      month: 'long',\r\n      day: 'numeric'\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-white shadow-lg rounded-lg p-6 mb-6\">\r\n      <div>\r\n        <Calendar \r\n          onSelectDates={handleSelectDates} \r\n          selectedDates={selectedDates}\r\n        />\r\n        {selectedDates.length > 0 && (\r\n          <div className=\"mt-6 p-4 bg-blue-50 rounded-md border border-blue-200\">\r\n            <h3 className=\"text-lg font-semibold text-blue-800 mb-2\">Selected Dates:</h3>\r\n            <ul className=\"space-y-1\">\r\n              {selectedDates.map((date) => (\r\n                <li key={date.toString()} className=\"flex items-center text-blue-700\">\r\n                  <CalendarIcon className=\"mr-2\" size={16} />\r\n                  {formatDisplayDate(date)}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n            <button\r\n              onClick={handleSaveDates}\r\n              disabled={isSaving}\r\n              className=\"mt-4 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-blue-300\"\r\n            >\r\n              {isSaving ? 'Saving...' : 'Save Dates'}\r\n            </button>\r\n            {message && (\r\n              <p className={`mt-2 ${message.includes('Error') ? 'text-red-600' : 'text-green-600'}`}>\r\n                {message}\r\n              </p>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminCalendar;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}