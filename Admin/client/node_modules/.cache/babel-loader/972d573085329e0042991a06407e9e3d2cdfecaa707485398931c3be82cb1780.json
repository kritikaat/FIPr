{"ast":null,"code":"var _jsxFileName = \"D:\\\\IPR Version 1\\\\Admin\\\\client\\\\src\\\\components\\\\AdminCalendar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Calendar from './Calendar';\nimport { CalendarIcon } from 'lucide-react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminCalendar = () => {\n  _s();\n  const [selectedDates, setSelectedDates] = useState([]);\n  const [isSaving, setIsSaving] = useState(false);\n  const [message, setMessage] = useState('');\n\n  // Helper function to normalize date to local midnight\n  const normalizeDate = date => {\n    if (!date) return null;\n    const normalized = new Date(date);\n    normalized.setHours(0, 0, 0, 0);\n    return normalized;\n  };\n\n  // Helper function to check if two dates are the same\n  const isSameDate = (date1, date2) => {\n    if (!date1 || !date2) return false;\n    const d1 = normalizeDate(date1);\n    const d2 = normalizeDate(date2);\n    return d1.getTime() === d2.getTime();\n  };\n  useEffect(() => {\n    let mounted = true;\n    const fetchBusyDates = async () => {\n      try {\n        const response = await axios.get('/api/admin/busy-dates');\n        if (mounted) {\n          const normalizedDates = response.data.dates.map(dateObj => normalizeDate(dateObj.date)).filter(Boolean); // Remove any null values\n          setSelectedDates(normalizedDates);\n        }\n      } catch (error) {\n        if (mounted) {\n          setMessage('Error fetching dates');\n          console.error('Error:', error);\n        }\n      }\n    };\n    fetchBusyDates();\n    return () => {\n      mounted = false;\n    };\n  }, []); // Empty dependency array to run only once\n\n  const handleSelectDates = newDates => {\n    // Check if the arrays are actually different before updating\n    const hasChanged = newDates.length !== selectedDates.length || newDates.some((newDate, index) => !isSameDate(newDate, selectedDates[index]));\n    if (hasChanged) {\n      const normalizedDates = newDates.map(date => normalizeDate(date)).filter(Boolean);\n      setSelectedDates(normalizedDates);\n    }\n  };\n  const handleSaveDates = async () => {\n    setIsSaving(true);\n    setMessage('');\n    try {\n      await axios.post('/api/admin/busy-dates', {\n        dates: selectedDates.map(date => normalizeDate(date).toISOString().split('T')[0])\n      });\n      setMessage('Dates saved successfully!');\n    } catch (error) {\n      setMessage('Error saving dates');\n      console.error('Error:', error);\n    } finally {\n      setIsSaving(false);\n    }\n  };\n  const formatDisplayDate = date => {\n    if (!date) return '';\n    return normalizeDate(date).toLocaleDateString('en-US', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white shadow-lg rounded-lg p-6 mb-6\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Calendar, {\n        onSelectDates: handleSelectDates,\n        selectedDates: selectedDates\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: `mt-2 ${message.includes('Error') ? 'text-red-600' : 'text-green-600'}`,\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this), selectedDates.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-6 p-4 bg-blue-50 rounded-md border border-blue-200\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-lg font-semibold text-blue-800 mb-2\",\n          children: \"Selected Dates:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"space-y-1\",\n          children: selectedDates.map(date => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"flex items-center text-blue-700\",\n            children: [/*#__PURE__*/_jsxDEV(CalendarIcon, {\n              className: \"mr-2\",\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 19\n            }, this), formatDisplayDate(date)]\n          }, date.toString(), true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSaveDates,\n          disabled: isSaving,\n          className: \"mt-4 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-blue-300\",\n          children: isSaving ? 'Saving...' : 'Save Dates'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(AdminCalendar, \"3vqGlZZrFZsZgLuh2jo12ASK2oo=\");\n_c = AdminCalendar;\nexport default AdminCalendar;\nvar _c;\n$RefreshReg$(_c, \"AdminCalendar\");","map":{"version":3,"names":["React","useState","useEffect","Calendar","CalendarIcon","axios","jsxDEV","_jsxDEV","AdminCalendar","_s","selectedDates","setSelectedDates","isSaving","setIsSaving","message","setMessage","normalizeDate","date","normalized","Date","setHours","isSameDate","date1","date2","d1","d2","getTime","mounted","fetchBusyDates","response","get","normalizedDates","data","dates","map","dateObj","filter","Boolean","error","console","handleSelectDates","newDates","hasChanged","length","some","newDate","index","handleSaveDates","post","toISOString","split","formatDisplayDate","toLocaleDateString","weekday","year","month","day","className","children","onSelectDates","fileName","_jsxFileName","lineNumber","columnNumber","includes","size","toString","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/IPR Version 1/Admin/client/src/components/AdminCalendar.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Calendar from './Calendar';\r\nimport { CalendarIcon } from 'lucide-react';\r\nimport axios from 'axios';\r\n\r\nconst AdminCalendar = () => {\r\n  const [selectedDates, setSelectedDates] = useState([]);\r\n  const [isSaving, setIsSaving] = useState(false);\r\n  const [message, setMessage] = useState('');\r\n\r\n  // Helper function to normalize date to local midnight\r\n  const normalizeDate = (date) => {\r\n    if (!date) return null;\r\n    const normalized = new Date(date);\r\n    normalized.setHours(0, 0, 0, 0);\r\n    return normalized;\r\n  };\r\n\r\n  // Helper function to check if two dates are the same\r\n  const isSameDate = (date1, date2) => {\r\n    if (!date1 || !date2) return false;\r\n    const d1 = normalizeDate(date1);\r\n    const d2 = normalizeDate(date2);\r\n    return d1.getTime() === d2.getTime();\r\n  };\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n\r\n    const fetchBusyDates = async () => {\r\n      try {\r\n        const response = await axios.get('/api/admin/busy-dates');\r\n        if (mounted) {\r\n          const normalizedDates = response.data.dates\r\n            .map(dateObj => normalizeDate(dateObj.date))\r\n            .filter(Boolean); // Remove any null values\r\n          setSelectedDates(normalizedDates);\r\n        }\r\n      } catch (error) {\r\n        if (mounted) {\r\n          setMessage('Error fetching dates');\r\n          console.error('Error:', error);\r\n        }\r\n      }\r\n    };\r\n\r\n    fetchBusyDates();\r\n\r\n    return () => {\r\n      mounted = false;\r\n    };\r\n  }, []); // Empty dependency array to run only once\r\n\r\n  const handleSelectDates = (newDates) => {\r\n    // Check if the arrays are actually different before updating\r\n    const hasChanged = newDates.length !== selectedDates.length ||\r\n      newDates.some((newDate, index) => \r\n        !isSameDate(newDate, selectedDates[index])\r\n      );\r\n\r\n    if (hasChanged) {\r\n      const normalizedDates = newDates\r\n        .map(date => normalizeDate(date))\r\n        .filter(Boolean);\r\n      setSelectedDates(normalizedDates);\r\n    }\r\n  };\r\n\r\n  const handleSaveDates = async () => {\r\n    setIsSaving(true);\r\n    setMessage('');\r\n\r\n    try {\r\n      await axios.post('/api/admin/busy-dates', {\r\n        dates: selectedDates.map(date => \r\n          normalizeDate(date).toISOString().split('T')[0]\r\n        )\r\n      });\r\n      setMessage('Dates saved successfully!');\r\n    } catch (error) {\r\n      setMessage('Error saving dates');\r\n      console.error('Error:', error);\r\n    } finally {\r\n      setIsSaving(false);\r\n    }\r\n  };\r\n\r\n  const formatDisplayDate = (date) => {\r\n    if (!date) return '';\r\n    return normalizeDate(date).toLocaleDateString('en-US', {\r\n      weekday: 'long',\r\n      year: 'numeric',\r\n      month: 'long',\r\n      day: 'numeric'\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-white shadow-lg rounded-lg p-6 mb-6\">\r\n      <div>\r\n        <Calendar \r\n          onSelectDates={handleSelectDates} \r\n          selectedDates={selectedDates}\r\n        />\r\n        {message && (\r\n          <p className={`mt-2 ${message.includes('Error') ? 'text-red-600' : 'text-green-600'}`}>\r\n            {message}\r\n          </p>\r\n        )}\r\n        {selectedDates.length > 0 && (\r\n          <div className=\"mt-6 p-4 bg-blue-50 rounded-md border border-blue-200\">\r\n            <h3 className=\"text-lg font-semibold text-blue-800 mb-2\">Selected Dates:</h3>\r\n            <ul className=\"space-y-1\">\r\n              {selectedDates.map((date) => (\r\n                <li key={date.toString()} className=\"flex items-center text-blue-700\">\r\n                  <CalendarIcon className=\"mr-2\" size={16} />\r\n                  {formatDisplayDate(date)}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n            <button\r\n              onClick={handleSaveDates}\r\n              disabled={isSaving}\r\n              className=\"mt-4 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-blue-300\"\r\n            >\r\n              {isSaving ? 'Saving...' : 'Save Dates'}\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminCalendar;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}