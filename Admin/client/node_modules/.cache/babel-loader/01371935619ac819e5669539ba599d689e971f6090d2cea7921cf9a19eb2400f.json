{"ast":null,"code":"const JSON2CSVBase = require(\"./JSON2CSVBase\");\nconst {\n  Tokenizer,\n  TokenParser,\n  TokenType\n} = require('@streamparser/json');\nclass JSON2CSVStreamParser extends JSON2CSVBase {\n  constructor(opts, asyncOpts) {\n    super(opts);\n    this.opts = this.preprocessOpts(opts);\n    this.initTokenizer(opts, asyncOpts);\n    if (this.opts.fields) this.preprocessFieldsInfo(this.opts.fields);\n  }\n  initTokenizer(opts = {}, asyncOpts = {}) {\n    if (asyncOpts.objectMode) {\n      this.tokenizer = this.getObjectModeTokenizer();\n      return;\n    }\n    if (opts.ndjson) {\n      this.tokenizer = this.getNdJsonTokenizer(asyncOpts);\n      return;\n    }\n    this.tokenizer = this.getBinaryModeTokenizer(asyncOpts);\n    return;\n  }\n  getObjectModeTokenizer() {\n    return {\n      write: data => this.pushLine(data),\n      end: () => {\n        this.pushHeaderIfNotWritten();\n        this.onEnd();\n      }\n    };\n  }\n  configureCallbacks(tokenizer, tokenParser) {\n    tokenizer.onToken = tokenParser.write.bind(this.tokenParser);\n    tokenizer.onError = err => this.onError(err);\n    tokenizer.onEnd = () => {\n      if (!this.tokenParser.isEnded) this.tokenParser.end();\n    };\n    tokenParser.onValue = value => this.pushLine(value);\n    tokenParser.onError = err => this.onError(err);\n    tokenParser.onEnd = () => {\n      this.pushHeaderIfNotWritten();\n      this.onEnd();\n    };\n  }\n  getNdJsonTokenizer(asyncOpts) {\n    const tokenizer = new Tokenizer({\n      ...asyncOpts,\n      separator: '\\n'\n    });\n    this.tokenParser = new TokenParser({\n      paths: ['$'],\n      keepStack: false,\n      separator: '\\n'\n    });\n    this.configureCallbacks(tokenizer, this.tokenParser);\n    return tokenizer;\n  }\n  getBinaryModeTokenizer(asyncOpts) {\n    const tokenizer = new Tokenizer(asyncOpts);\n    tokenizer.onToken = (token, value, offset) => {\n      if (token === TokenType.LEFT_BRACKET) {\n        this.tokenParser = new TokenParser({\n          paths: ['$.*'],\n          keepStack: false\n        });\n      } else if (token === TokenType.LEFT_BRACE) {\n        this.tokenParser = new TokenParser({\n          paths: ['$'],\n          keepStack: false\n        });\n      } else {\n        this.onError(new Error('Data should be a JSON object or array'));\n        return;\n      }\n      this.configureCallbacks(tokenizer, this.tokenParser);\n      this.tokenParser.write(token, value, offset);\n    };\n    tokenizer.onError = () => this.onError(new Error('Data should be a JSON object or array'));\n    tokenizer.onEnd = () => {\n      this.onError(new Error('Data should not be empty or the \"fields\" option should be included'));\n      this.onEnd();\n    };\n    return tokenizer;\n  }\n  write(data) {\n    this.tokenizer.write(data);\n  }\n  end() {\n    if (this.tokenizer && !this.tokenizer.isEnded) this.tokenizer.end();\n  }\n  pushHeaderIfNotWritten() {\n    if (this._hasWritten) return;\n    if (!this.opts.fields) {\n      this.onError(new Error('Data should not be empty or the \"fields\" option should be included'));\n      return;\n    }\n    this.pushHeader();\n  }\n\n  /**\r\n   * Generate the csv header and pushes it downstream.\r\n   */\n  pushHeader() {\n    if (this.opts.withBOM) {\n      this.onData('\\ufeff');\n    }\n    if (this.opts.header) {\n      const header = this.getHeader(this.opts.fields);\n      this.onHeader(header);\n      this.onData(header);\n      this._hasWritten = true;\n    }\n  }\n\n  /**\r\n   * Transforms an incoming json data to csv and pushes it downstream.\r\n   *\r\n   * @param {Object} data JSON object to be converted in a CSV row\r\n   */\n  pushLine(data) {\n    const processedData = this.preprocessRow(data);\n    if (!this._hasWritten) {\n      this.opts.fields = this.preprocessFieldsInfo(this.opts.fields || Object.keys(processedData[0]));\n      this.pushHeader(this.opts.fields);\n    }\n    processedData.forEach(row => {\n      const line = this.processRow(row, this.opts.fields);\n      if (line === undefined) return;\n      this.onLine(line);\n      this.onData(this._hasWritten ? this.opts.eol + line : line);\n      this._hasWritten = true;\n    });\n  }\n\n  // No idea why eslint doesn't detect the usage of these\n  /* eslint-disable no-unused-vars */\n  onHeader(header) {}\n  onLine(line) {}\n  onData(data) {}\n  onError() {}\n  onEnd() {}\n  /* eslint-enable no-unused-vars */\n}\nmodule.exports = JSON2CSVStreamParser;","map":{"version":3,"names":["JSON2CSVBase","require","Tokenizer","TokenParser","TokenType","JSON2CSVStreamParser","constructor","opts","asyncOpts","preprocessOpts","initTokenizer","fields","preprocessFieldsInfo","objectMode","tokenizer","getObjectModeTokenizer","ndjson","getNdJsonTokenizer","getBinaryModeTokenizer","write","data","pushLine","end","pushHeaderIfNotWritten","onEnd","configureCallbacks","tokenParser","onToken","bind","onError","err","isEnded","onValue","value","separator","paths","keepStack","token","offset","LEFT_BRACKET","LEFT_BRACE","Error","_hasWritten","pushHeader","withBOM","onData","header","getHeader","onHeader","processedData","preprocessRow","Object","keys","forEach","row","line","processRow","undefined","onLine","eol","module","exports"],"sources":["C:/Users/kruti/Downloads/FIPr/Admin/client/node_modules/json2csv/lib/JSON2CSVStreamParser.js"],"sourcesContent":["const JSON2CSVBase = require(\"./JSON2CSVBase\");\r\nconst { Tokenizer, TokenParser, TokenType } = require('@streamparser/json');\r\n\r\nclass JSON2CSVStreamParser extends JSON2CSVBase {\r\n  constructor(opts, asyncOpts) {\r\n    super(opts);\r\n    this.opts = this.preprocessOpts(opts);\r\n    this.initTokenizer(opts, asyncOpts);\r\n    if (this.opts.fields) this.preprocessFieldsInfo(this.opts.fields);\r\n  }\r\n\r\n  initTokenizer(opts = {}, asyncOpts = {}) {\r\n    if (asyncOpts.objectMode) {\r\n      this.tokenizer = this.getObjectModeTokenizer();\r\n      return;\r\n    }\r\n\r\n    if (opts.ndjson) {\r\n      this.tokenizer = this.getNdJsonTokenizer(asyncOpts);\r\n      return;\r\n    }\r\n\r\n    this.tokenizer = this.getBinaryModeTokenizer(asyncOpts);\r\n    return;\r\n  }\r\n\r\n  getObjectModeTokenizer() {\r\n    return {\r\n      write: (data) => this.pushLine(data),\r\n      end: () => {\r\n        this.pushHeaderIfNotWritten();\r\n        this.onEnd();\r\n      },\r\n    };\r\n  }\r\n\r\n  configureCallbacks(tokenizer, tokenParser) {\r\n    tokenizer.onToken = tokenParser.write.bind(this.tokenParser);\r\n    tokenizer.onError = (err) => this.onError(err);\r\n    tokenizer.onEnd = () => {\r\n      if (!this.tokenParser.isEnded) this.tokenParser.end();\r\n    };\r\n\r\n    tokenParser.onValue = (value) => this.pushLine(value);\r\n    tokenParser.onError = (err) => this.onError(err);\r\n    tokenParser.onEnd = () => {\r\n      this.pushHeaderIfNotWritten();\r\n      this.onEnd();\r\n    };\r\n  }\r\n\r\n  getNdJsonTokenizer(asyncOpts) {\r\n    const tokenizer = new Tokenizer({ ...asyncOpts, separator: '\\n' });\r\n    this.tokenParser = new TokenParser({ paths: ['$'], keepStack: false, separator: '\\n' });\r\n    this.configureCallbacks(tokenizer, this.tokenParser);\r\n    return tokenizer;\r\n  }\r\n\r\n  getBinaryModeTokenizer(asyncOpts) {\r\n    const tokenizer = new Tokenizer(asyncOpts);\r\n    tokenizer.onToken = (token, value, offset) => {\r\n      if (token === TokenType.LEFT_BRACKET) {\r\n        this.tokenParser = new TokenParser({ paths: ['$.*'], keepStack: false });\r\n      } else if (token === TokenType.LEFT_BRACE) {\r\n        this.tokenParser = new TokenParser({ paths: ['$'], keepStack: false });\r\n      } else {\r\n        this.onError(new Error('Data should be a JSON object or array'));\r\n        return;\r\n      }\r\n\r\n      this.configureCallbacks(tokenizer, this.tokenParser);\r\n\r\n      this.tokenParser.write(token, value, offset);\r\n    };\r\n    tokenizer.onError = () => this.onError(new Error('Data should be a JSON object or array'));\r\n    tokenizer.onEnd = () => {\r\n      this.onError(new Error('Data should not be empty or the \"fields\" option should be included'));\r\n      this.onEnd();\r\n    };\r\n  \r\n    return tokenizer;\r\n  }\r\n\r\n  write(data) {\r\n    this.tokenizer.write(data);\r\n  }\r\n\r\n  end() {\r\n    if (this.tokenizer && !this.tokenizer.isEnded) this.tokenizer.end();\r\n  }\r\n\r\n  pushHeaderIfNotWritten() {\r\n    if (this._hasWritten) return;\r\n    if (!this.opts.fields) {\r\n      this.onError(new Error('Data should not be empty or the \"fields\" option should be included'));\r\n      return;\r\n    }\r\n\r\n    this.pushHeader();\r\n  }\r\n\r\n  /**\r\n   * Generate the csv header and pushes it downstream.\r\n   */\r\n  pushHeader() {\r\n    if (this.opts.withBOM) {\r\n      this.onData('\\ufeff');\r\n    }\r\n  \r\n    if (this.opts.header) {\r\n      const header = this.getHeader(this.opts.fields);\r\n      this.onHeader(header);\r\n      this.onData(header);\r\n      this._hasWritten = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Transforms an incoming json data to csv and pushes it downstream.\r\n   *\r\n   * @param {Object} data JSON object to be converted in a CSV row\r\n   */\r\n  pushLine(data) {\r\n    const processedData = this.preprocessRow(data);\r\n    \r\n    if (!this._hasWritten) {\r\n      this.opts.fields = this.preprocessFieldsInfo(this.opts.fields || Object.keys(processedData[0]));\r\n      this.pushHeader(this.opts.fields);\r\n    }\r\n\r\n    processedData.forEach(row => {\r\n      const line = this.processRow(row, this.opts.fields);\r\n      if (line === undefined) return;\r\n      this.onLine(line);\r\n      this.onData(this._hasWritten ? this.opts.eol + line : line);\r\n      this._hasWritten = true;\r\n    });\r\n  }\r\n\r\n  // No idea why eslint doesn't detect the usage of these\r\n  /* eslint-disable no-unused-vars */\r\n  onHeader(header) {}\r\n  onLine(line) {}\r\n  onData(data) {}\r\n  onError() {}\r\n  onEnd() {}\r\n  /* eslint-enable no-unused-vars */\r\n}\r\n\r\nmodule.exports = JSON2CSVStreamParser;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}